// 1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started

// 2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.

// 3. Run prisma db pull to turn your database schema into a Prisma schema.

// 4. Run prisma generate to generate the Prisma Client. You can then start querying your database.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int           @id @default(autoincrement())
  phone           String?       @unique
  email           String?       @unique
  name            String
  avatar          String?
  createAt        DateTime      @default(now())
  updateAt        DateTime      @updatedAt
  token           Token[]
  product         Product[]
  favorite        Favorite[]
  posts           Post[]
  answer          Answer[]
  wonderings      Wondering[]
  writtenReviews  Review[]      @relation(name: "writtenReviews")
  receivedReviews Review[]      @relation(name: "receivedReviews")
  sale            Sale[]
  purchase        Purchase[]
  stream          Stream[]
  message         Message[]
  seller          Chat[]        @relation(name: "seller")
  shopper         Chat[]        @relation(name: "shopper")
  chatMessage     ChatMessage[]
}

model Token {
  id       Int      @id @default(autoincrement())
  payload  String   @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   Int

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  favorite    Favorite[]
  sale        Sale[]
  purchase    Purchase[]
  chat        Chat[]

  @@index([userId])
}

model Post {
  id        Int         @id @default(autoincrement())
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  latitude  Float?
  longitude Float?
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  answerId  Int?
  answers   Answer[]
  wondering Wondering[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  answer    String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  productId Int?

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int

  @@index([userId])
  @@index([postId])
}

model Review {
  id          Int      @id @default(autoincrement())
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  score       Int
  review      String   @db.MediumText
  createBy    User     @relation(name: "writtenReviews", fields: [createById], references: [id], onDelete: Cascade)
  createById  Int
  createFor   User     @relation(name: "receivedReviews", fields: [createForId], references: [id])
  createForId Int

  @@index([createById])
  @@index([createForId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model Stream {
  id            Int       @id @default(autoincrement())
  createAt      DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  name          String
  description   String    @db.MediumText
  price         Int
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  message       Message[]
  cloudflareId  String
  cloudflareUrl String?
  cloudflareKey String?

  @@index([userId])
}

model Message {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  message  String   @db.MediumText
  stream   Stream   @relation(fields: [streamId], references: [id])
  streamId Int

  @@index([userId])
  @@index([streamId])
}

model Chat {
  id        Int           @id @default(autoincrement())
  createAt  DateTime      @default(now())
  updateAt  DateTime      @updatedAt
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  seller    User          @relation(name: "seller", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId  Int
  shopper   User          @relation(name: "shopper", fields: [shopperId], references: [id])
  shopperId Int
  message   ChatMessage[]

  @@index([shopperId])
  @@index([sellerId])
  @@index([productId])
}

model ChatMessage {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  message  String   @db.MediumText
  Chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   Int

  @@index([userId])
  @@index([chatId])
}
